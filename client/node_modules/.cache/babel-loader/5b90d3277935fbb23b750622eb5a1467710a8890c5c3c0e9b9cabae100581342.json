{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\github\\\\UNO-online\\\\client\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CARDS from '../utils/cards';\nimport shuffleArray from '../utils/shuffleArray';\nimport io from 'socket.io-client';\nimport Spinner from './Spinner';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport '../App.css';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = 'http://localhost:5000';\n/*\r\nconst ENDPOINT = 'http://localhost:5000';\r\n*/\n\nlet socket;\nconst Game = props => {\n  _s();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const roomCode = queryParams.get('roomCode');\n  const history = useNavigate();\n  const username = queryParams.get('username');\n  let gamesPlayed = queryParams.get('gamesPlayed');\n  let gamesWon = queryParams.get('gamesWon');\n  const [stats, setStats] = useState({\n    gamesPlayed: gamesPlayed,\n    gamesWon: gamesWon\n  });\n  const [room, setRoom] = useState(roomCode);\n  const [roomFull, setRoomFull] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [gameOver, setGameOver] = useState(true);\n  const [winner, setWinner] = useState('');\n  const [player1Deck, setPlayer1Deck] = useState([]);\n  const [player2Deck, setPlayer2Deck] = useState([]);\n  const [turn, setTurn] = useState('');\n  const [playedCardsPile, setPlayedCardsPile] = useState([]);\n  const [drawCardPile, setDrawCardPile] = useState([]);\n  const [currentColor, setCurrentColor] = useState('');\n  const [currentNumber, setCurrentNumber] = useState('');\n  const [isChatBoxHidden, setChatBoxHidden] = useState(true);\n  const [isUnoButtonPressed, setUnoButtonPressed] = useState(false);\n  useEffect(() => {\n    const connectionOptions = {\n      \"forceNew\": true,\n      \"reconnectionAttempts\": \"Infinity\",\n      \"timeout\": 10000,\n      \"transports\": [\"websocket\"]\n    };\n    socket = io.connect(ENDPOINT, connectionOptions);\n    socket.emit('join', {\n      room: room\n    }, error => {\n      if (error) setRoomFull(true);\n    });\n    return function cleanup() {\n      socket.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    const shuffledCards = shuffleArray(CARDS);\n    const player1Deck = shuffledCards.slice(0, 7);\n    const player2Deck = shuffledCards.slice(8, 15);\n    let startingCardIndex;\n    while (true) {\n      startingCardIndex = Math.floor(Math.random() * 94);\n      if (shuffledCards[startingCardIndex] === 'skipR' || shuffledCards[startingCardIndex] === '_R' || shuffledCards[startingCardIndex] === 'D2R' || shuffledCards[startingCardIndex] === 'skipG' || shuffledCards[startingCardIndex] === '_G' || shuffledCards[startingCardIndex] === 'D2G' || shuffledCards[startingCardIndex] === 'skipB' || shuffledCards[startingCardIndex] === '_B' || shuffledCards[startingCardIndex] === 'D2B' || shuffledCards[startingCardIndex] === 'skipY' || shuffledCards[startingCardIndex] === '_Y' || shuffledCards[startingCardIndex] === 'D2Y' || shuffledCards[startingCardIndex] === 'W' || shuffledCards[startingCardIndex] === 'D4W') {\n        continue;\n      } else break;\n    }\n    const playedCardsPile = shuffledCards.splice(startingCardIndex, 1);\n    const drawCardPile = shuffledCards;\n    socket.emit('initGameState', {\n      gameOver: false,\n      turn: 'Player 1',\n      player1Deck: [...player1Deck],\n      player2Deck: [...player2Deck],\n      currentColor: playedCardsPile[0].charAt(1),\n      currentNumber: playedCardsPile[0].charAt(0),\n      playedCardsPile: [...playedCardsPile],\n      drawCardPile: [...drawCardPile]\n    });\n  }, [socket]);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('initGameState', ({\n      gameOver,\n      turn,\n      player1Deck,\n      player2Deck,\n      currentColor,\n      currentNumber,\n      playedCardsPile,\n      drawCardPile\n    }) => {\n      setGameOver(gameOver);\n      setTurn(turn);\n      setPlayer1Deck(player1Deck);\n      setPlayer2Deck(player2Deck);\n      setCurrentColor(currentColor);\n      setCurrentNumber(currentNumber);\n      setPlayedCardsPile(playedCardsPile);\n      setDrawCardPile(drawCardPile);\n    });\n    socket.on('updateGameState', ({\n      gameOver,\n      winner,\n      turn,\n      player1Deck,\n      player2Deck,\n      currentColor,\n      currentNumber,\n      playedCardsPile,\n      drawCardPile\n    }) => {\n      gameOver && setGameOver(gameOver);\n      winner && setWinner(winner);\n      turn && setTurn(turn);\n      player1Deck && setPlayer1Deck(player1Deck);\n      player2Deck && setPlayer2Deck(player2Deck);\n      currentColor && setCurrentColor(currentColor);\n      currentNumber && setCurrentNumber(currentNumber);\n      playedCardsPile && setPlayedCardsPile(playedCardsPile);\n      drawCardPile && setDrawCardPile(drawCardPile);\n      setUnoButtonPressed(false);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n    socket.on('currentUserData', ({\n      name\n    }) => {\n      setCurrentUser(name);\n    });\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n      const chatBody = document.querySelector('.chat-body');\n      chatBody.scrollTop = chatBody.scrollHeight;\n    });\n  }, [socket]);\n  const checkGameOver = arr => {\n    return arr.length === 1;\n  };\n  const checkWinner = (arr, player) => {\n    return arr.length === 1 ? player : '';\n  };\n  const toggleChatBox = () => {\n    const chatBody = document.querySelector('.chat-body');\n    if (isChatBoxHidden) {\n      chatBody.style.display = 'block';\n      setChatBoxHidden(false);\n    } else {\n      chatBody.style.display = 'none';\n      setChatBoxHidden(true);\n    }\n  };\n  const sendMessage = event => {\n    event.preventDefault();\n    if (message) {\n      socket.emit('sendMessage', {\n        message: message\n      }, () => {\n        setMessage('');\n      });\n    }\n  };\n  const onCardPlayedHandler = played_card => {\n    const cardPlayedBy = turn;\n    if (played_card.length === 2 && (played_card.charAt(0) >= '0' && played_card.charAt(0) <= '9' || played_card.charAt(0) === '_')) {\n      const numberOfPlayedCard = played_card.charAt(0);\n      const colorOfPlayedCard = played_card.charAt(1);\n      if (currentColor === colorOfPlayedCard || currentNumber === numberOfPlayedCard) {\n        if (cardPlayedBy === 'Player 1') {\n          const removeIndex = player1Deck.indexOf(played_card);\n          if (player1Deck.length === 2 && !isUnoButtonPressed) {\n            alert('You forgot to press UNO. You drew 2 cards as penalty.');\n            const copiedDrawCardPileArray = [...drawCardPile];\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n            updatedPlayer1Deck.push(drawCard1);\n            updatedPlayer1Deck.push(drawCard2);\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player1Deck),\n              winner: checkWinner(player1Deck, 'Player 1'),\n              turn: 'Player 2',\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player1Deck: [...updatedPlayer1Deck],\n              currentColor: colorOfPlayedCard,\n              currentNumber: numberOfPlayedCard,\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          } else {\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player1Deck),\n              winner: checkWinner(player1Deck, 'Player 1'),\n              turn: 'Player 2',\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n              currentColor: colorOfPlayedCard,\n              currentNumber: numberOfPlayedCard\n            });\n          }\n        } else {\n          const removeIndex = player2Deck.indexOf(played_card);\n          if (player2Deck.length === 2 && !isUnoButtonPressed) {\n            alert('You forgot to press UNO. You drew 2 cards as penalty.');\n            const copiedDrawCardPileArray = [...drawCardPile];\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n            updatedPlayer2Deck.push(drawCard1);\n            updatedPlayer2Deck.push(drawCard2);\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player2Deck),\n              winner: checkWinner(player2Deck, 'Player 2'),\n              turn: 'Player 1',\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player2Deck: [...updatedPlayer2Deck],\n              currentColor: colorOfPlayedCard,\n              currentNumber: numberOfPlayedCard,\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          } else {\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player2Deck),\n              winner: checkWinner(player2Deck, 'Player 2'),\n              turn: 'Player 1',\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n              currentColor: colorOfPlayedCard,\n              currentNumber: numberOfPlayedCard\n            });\n          }\n        }\n      } else {\n        alert('Invalid move');\n      }\n    } else if (played_card.length === 5) {\n      const colorOfPlayedCard = played_card.charAt(4);\n      if (currentColor === colorOfPlayedCard || currentNumber === 404) {\n        if (cardPlayedBy === 'Player 1') {\n          const removeIndex = player1Deck.indexOf(played_card);\n          if (player1Deck.length === 2 && !isUnoButtonPressed) {\n            alert('You forgot to press UNO. You drew 2 cards as penalty.');\n            const copiedDrawCardPileArray = [...drawCardPile];\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n            updatedPlayer1Deck.push(drawCard1);\n            updatedPlayer1Deck.push(drawCard2);\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player1Deck),\n              winner: checkWinner(player1Deck, 'Player 1'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player1Deck: [...updatedPlayer1Deck],\n              currentColor: colorOfPlayedCard,\n              currentNumber: 404,\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          } else {\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player1Deck),\n              winner: checkWinner(player1Deck, 'Player 1'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n              currentColor: colorOfPlayedCard,\n              currentNumber: 404\n            });\n          }\n        } else {\n          const removeIndex = player2Deck.indexOf(played_card);\n          if (player2Deck.length === 2 && !isUnoButtonPressed) {\n            alert('You forgot to press UNO. You drew 2 cards as penalty.');\n            const copiedDrawCardPileArray = [...drawCardPile];\n            const drawCard1 = copiedDrawCardPileArray.pop();\n            const drawCard2 = copiedDrawCardPileArray.pop();\n            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n            updatedPlayer2Deck.push(drawCard1);\n            updatedPlayer2Deck.push(drawCard2);\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player2Deck),\n              winner: checkWinner(player2Deck, 'Player 2'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player2Deck: [...updatedPlayer2Deck],\n              currentColor: colorOfPlayedCard,\n              currentNumber: 404,\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          } else {\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player2Deck),\n              winner: checkWinner(player2Deck, 'Player 2'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n              currentColor: colorOfPlayedCard,\n              currentNumber: 404\n            });\n          }\n        }\n      } else {\n        alert('Invalid Move!');\n      }\n    } else if (played_card.length === 3 && played_card.charAt(1) === '2') {\n      const colorOfPlayedCard = played_card.charAt(2);\n      if (currentColor === colorOfPlayedCard || currentNumber === 252) {\n        if (cardPlayedBy === 'Player 1') {\n          const removeIndex = player1Deck.indexOf(played_card);\n          const copiedDrawCardPileArray = [...drawCardPile];\n          const drawCard1 = copiedDrawCardPileArray.pop();\n          const drawCard2 = copiedDrawCardPileArray.pop();\n          if (player1Deck.length === 2 && !isUnoButtonPressed) {\n            alert('You forgot to press UNO. You drew 2 cards as penalty.');\n            const drawCard1X = copiedDrawCardPileArray.pop();\n            const drawCard2X = copiedDrawCardPileArray.pop();\n            const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n            updatedPlayer1Deck.push(drawCard1X);\n            updatedPlayer1Deck.push(drawCard2X);\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player1Deck),\n              winner: checkWinner(player1Deck, 'Player 1'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player1Deck: [...updatedPlayer1Deck],\n              player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n              currentColor: colorOfPlayedCard,\n              currentNumber: 252,\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          } else {\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player1Deck),\n              winner: checkWinner(player1Deck, 'Player 1'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n              player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n              currentColor: colorOfPlayedCard,\n              currentNumber: 252,\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          }\n        } else {\n          const removeIndex = player2Deck.indexOf(played_card);\n          const copiedDrawCardPileArray = [...drawCardPile];\n          const drawCard1 = copiedDrawCardPileArray.pop();\n          const drawCard2 = copiedDrawCardPileArray.pop();\n          if (player2Deck.length === 2 && !isUnoButtonPressed) {\n            alert('You forgot to press UNO. You drew 2 cards as penalty.');\n            const drawCard1X = copiedDrawCardPileArray.pop();\n            const drawCard2X = copiedDrawCardPileArray.pop();\n            const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n            updatedPlayer2Deck.push(drawCard1X);\n            updatedPlayer2Deck.push(drawCard2X);\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player2Deck),\n              winner: checkWinner(player2Deck, 'Player 2'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player2Deck: [...updatedPlayer2Deck],\n              player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n              currentColor: colorOfPlayedCard,\n              currentNumber: 252,\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          } else {\n            socket.emit('updateGameState', {\n              gameOver: checkGameOver(player2Deck),\n              winner: checkWinner(player2Deck, 'Player 2'),\n              playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n              player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n              player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n              currentColor: colorOfPlayedCard,\n              currentNumber: 252,\n              drawCardPile: [...copiedDrawCardPileArray]\n            });\n          }\n        }\n      } else {\n        alert('Invalid Move!');\n      }\n    } else if (played_card === 'W') {\n      if (cardPlayedBy === 'Player 1') {\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        const removeIndex = player1Deck.indexOf(played_card);\n        if (player1Deck.length === 2 && !isUnoButtonPressed) {\n          alert('You forgot to press UNO. You drew 2 cards as penalty.');\n          const copiedDrawCardPileArray = [...drawCardPile];\n          const drawCard1 = copiedDrawCardPileArray.pop();\n          const drawCard2 = copiedDrawCardPileArray.pop();\n          const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n          updatedPlayer1Deck.push(drawCard1);\n          updatedPlayer1Deck.push(drawCard2);\n          socket.emit('updateGameState', {\n            gameOver: checkGameOver(player1Deck),\n            winner: checkWinner(player1Deck, 'Player 1'),\n            turn: 'Player 2',\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n            player1Deck: [...updatedPlayer1Deck],\n            currentColor: newColor,\n            currentNumber: 300,\n            drawCardPile: [...copiedDrawCardPileArray]\n          });\n        } else {\n          socket.emit('updateGameState', {\n            gameOver: checkGameOver(player1Deck),\n            winner: checkWinner(player1Deck, 'Player 1'),\n            turn: 'Player 2',\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n            currentColor: newColor,\n            currentNumber: 300\n          });\n        }\n      } else {\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        const removeIndex = player2Deck.indexOf(played_card);\n        if (player2Deck.length === 2 && !isUnoButtonPressed) {\n          alert('You forgot to press UNO. You drew 2 cards as penalty.');\n          const copiedDrawCardPileArray = [...drawCardPile];\n          const drawCard1 = copiedDrawCardPileArray.pop();\n          const drawCard2 = copiedDrawCardPileArray.pop();\n          const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n          updatedPlayer2Deck.push(drawCard1);\n          updatedPlayer2Deck.push(drawCard2);\n          socket.emit('updateGameState', {\n            gameOver: checkGameOver(player2Deck),\n            winner: checkWinner(player2Deck, 'Player 2'),\n            turn: 'Player 1',\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n            player2Deck: [...updatedPlayer2Deck],\n            currentColor: newColor,\n            currentNumber: 300,\n            drawCardPile: [...copiedDrawCardPileArray]\n          });\n        } else {\n          socket.emit('updateGameState', {\n            gameOver: checkGameOver(player2Deck),\n            winner: checkWinner(player2Deck, 'Player 2'),\n            turn: 'Player 1',\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n            currentColor: newColor,\n            currentNumber: 300\n          });\n        }\n      }\n    } else if (played_card === 'D4W') {\n      if (cardPlayedBy === 'Player 1') {\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        const removeIndex = player1Deck.indexOf(played_card);\n        const copiedDrawCardPileArray = [...drawCardPile];\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        const drawCard3 = copiedDrawCardPileArray.pop();\n        const drawCard4 = copiedDrawCardPileArray.pop();\n        if (player1Deck.length === 2 && !isUnoButtonPressed) {\n          alert('You forgot to press UNO. You drew 2 cards as penalty.');\n          const drawCard1X = copiedDrawCardPileArray.pop();\n          const drawCard2X = copiedDrawCardPileArray.pop();\n          const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)];\n          updatedPlayer1Deck.push(drawCard1X);\n          updatedPlayer1Deck.push(drawCard2X);\n          socket.emit('updateGameState', {\n            gameOver: checkGameOver(player1Deck),\n            winner: checkWinner(player1Deck, 'Player 1'),\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n            currentColor: newColor,\n            currentNumber: 600,\n            drawCardPile: [...copiedDrawCardPileArray]\n          });\n        } else {\n          socket.emit('updateGameState', {\n            gameOver: checkGameOver(player1Deck),\n            winner: checkWinner(player1Deck, 'Player 1'),\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\n            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n            currentColor: newColor,\n            currentNumber: 600,\n            drawCardPile: [...copiedDrawCardPileArray]\n          });\n        }\n      } else {\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        const removeIndex = player2Deck.indexOf(played_card);\n        const copiedDrawCardPileArray = [...drawCardPile];\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        const drawCard3 = copiedDrawCardPileArray.pop();\n        const drawCard4 = copiedDrawCardPileArray.pop();\n\n        //?\n        socket.emit('updateGameState', {\n          gameOver: checkGameOver(player2Deck),\n          winner: checkWinner(player2Deck, 'Player 2'),\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n          player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n          player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n          currentColor: newColor,\n          currentNumber: 600,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n        if (player2Deck.length === 2 && !isUnoButtonPressed) {\n          alert('You forgot to press UNO. You drew 2 cards as penalty.');\n          const drawCard1X = copiedDrawCardPileArray.pop();\n          const drawCard2X = copiedDrawCardPileArray.pop();\n          const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)];\n          updatedPlayer2Deck.push(drawCard1X);\n          updatedPlayer2Deck.push(drawCard2X);\n          socket.emit('updateGameState', {\n            gameOver: checkGameOver(player2Deck),\n            winner: checkWinner(player2Deck, 'Player 2'),\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n            player2Deck: [...updatedPlayer2Deck],\n            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n            currentColor: newColor,\n            currentNumber: 600,\n            drawCardPile: [...copiedDrawCardPileArray]\n          });\n        } else {\n          socket.emit('updateGameState', {\n            gameOver: checkGameOver(player2Deck),\n            winner: checkWinner(player2Deck, 'Player 2'),\n            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\n            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\n            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n            currentColor: newColor,\n            currentNumber: 600,\n            drawCardPile: [...copiedDrawCardPileArray]\n          });\n        }\n      }\n    }\n  };\n  const onCardDrawnHandler = () => {\n    if (turn === 'Player 1') {\n      const copiedDrawCardPileArray = [...drawCardPile];\n      const drawCard = copiedDrawCardPileArray.pop();\n      const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n      const numberOfDrawnCard = drawCard.charAt(0);\n      if (colorOfDrawnCard === currentColor && drawCard.length === 5) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 404,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (colorOfDrawnCard === currentColor && drawCard.charAt(1) === '2') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        const copiedDrawCardPileArray = [...drawCardPile];\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 252,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'W') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: newColor,\n          currentNumber: 300,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'D4W') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        const copiedDrawCardPileArray = [...drawCardPile];\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        const drawCard3 = copiedDrawCardPileArray.pop();\n        const drawCard4 = copiedDrawCardPileArray.pop();\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\n          currentColor: newColor,\n          currentNumber: 600,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: numberOfDrawnCard,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else {\n        socket.emit('updateGameState', {\n          turn: 'Player 2',\n          player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      }\n    } else {\n      const copiedDrawCardPileArray = [...drawCardPile];\n      const drawCard = copiedDrawCardPileArray.pop();\n      const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n      const numberOfDrawnCard = drawCard.charAt(0);\n      if (colorOfDrawnCard === currentColor && drawCard.length === 5) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 404,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (colorOfDrawnCard === currentColor && drawCard.charAt(1) === '2') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        const copiedDrawCardPileArray = [...drawCardPile];\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: 252,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'W') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        socket.emit('updateGameState', {\n          turn: 'Player 1',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: newColor,\n          currentNumber: 300,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (drawCard === 'D4W') {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\n        const copiedDrawCardPileArray = [...drawCardPile];\n        const drawCard1 = copiedDrawCardPileArray.pop();\n        const drawCard2 = copiedDrawCardPileArray.pop();\n        const drawCard3 = copiedDrawCardPileArray.pop();\n        const drawCard4 = copiedDrawCardPileArray.pop();\n        socket.emit('updateGameState', {\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\n          currentColor: newColor,\n          currentNumber: 600,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else if (numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor) {\n        alert(`You drew ${drawCard}. It was played for you.`);\n        socket.emit('updateGameState', {\n          turn: 'Player 1',\n          playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\n          currentColor: colorOfDrawnCard,\n          currentNumber: numberOfDrawnCard,\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      } else {\n        socket.emit('updateGameState', {\n          turn: 'Player 1',\n          player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\n          drawCardPile: [...copiedDrawCardPileArray]\n        });\n      }\n    }\n  };\n  const handleGameOver = async () => {\n    setStats(prevStats => {\n      const updatedStats = {\n        gamesPlayed: Number(prevStats.gamesPlayed) + 1,\n        gamesWon: winner === currentUser ? Number(prevStats.gamesWon) + 1 : prevStats.gamesWon\n      };\n      updateStats(username, updatedStats.gamesPlayed, updatedStats.gamesWon);\n      return updatedStats;\n    });\n  };\n  const handleQuit = async () => {\n    await handleGameOver();\n    console.log(winner, currentUser);\n    localStorage.setItem('isAuthenticated', true);\n    history('/');\n  };\n  const updateStats = async (username, gamesPlayed, gamesWon) => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.put('http://localhost:5000/updateStats', {\n        username,\n        gamesPlayed,\n        gamesWon\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('User stats updated successfully');\n    } catch (error) {\n      console.error('Error updating user stats:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `Game backgroundColorR backgroundColor${currentColor}`,\n    children: [!roomFull ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"topInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"assets/logo.png\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Game Code: \", room]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 17\n      }, this), users.length === 1 && currentUser === 'Player 2' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"topInfoText\",\n        children: \"Player 1 has left the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 68\n      }, this), users.length === 1 && currentUser === 'Player 1' && /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"topInfoText\",\n        children: \"Waiting for Player 2 to join the game.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 68\n      }, this), users.length === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: winner !== '' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"GAME OVER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 44\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [winner, \" wins!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 62\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currentUser === 'Player 1' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player2Deck\",\n              style: {\n                pointerEvents: 'none'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 757,\n                columnNumber: 37\n              }, this), player2Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: \"assets/card-back.png\",\n                alt: \"\"\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 41\n              }, this)), turn === 'Player 2' && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 767,\n                columnNumber: 59\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 769,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"middleInfo\",\n              style: turn === 'Player 2' ? {\n                pointerEvents: 'none'\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button\",\n                disabled: turn !== 'Player 1',\n                onClick: onCardDrawnHandler,\n                children: \"DRAW CARD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 771,\n                columnNumber: 37\n              }, this), playedCardsPile && playedCardsPile.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                src: `./assets/cards-front/${playedCardsPile[playedCardsPile.length - 1]}.png`,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 773,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button orange\",\n                disabled: player1Deck.length !== 2,\n                onClick: () => {\n                  setUnoButtonPressed(!isUnoButtonPressed);\n                },\n                children: \"UNO\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 778,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 782,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player1Deck\",\n              style: turn === 'Player 1' ? null : {\n                pointerEvents: 'none'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 784,\n                columnNumber: 37\n              }, this), player1Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: `./assets/cards-front/${item}.png`,\n                alt: \"\"\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 786,\n                columnNumber: 41\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxWrapper\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-box chat-box-player1\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-head\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Chat Box\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 799,\n                    columnNumber: 45\n                  }, this), !isChatBoxHidden ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    className: \"material-icons\",\n                    children: \"keyboard_arrow_down\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 801,\n                    columnNumber: 49\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    className: \"material-icons\",\n                    children: \"keyboard_arrow_up\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 802,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 798,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"msg-insert\",\n                    children: messages.map(msg => {\n                      if (msg.user === 'Player 2') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-receive\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 808,\n                        columnNumber: 64\n                      }, this);\n                      if (msg.user === 'Player 1') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-send\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 810,\n                        columnNumber: 64\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 805,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chat-text\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: \"Type a message...\",\n                      value: message,\n                      onChange: event => setMessage(event.target.value),\n                      onKeyPress: event => event.key === 'Enter' && sendMessage(event)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 814,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 813,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 804,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 797,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 796,\n              columnNumber: 33\n            }, this), \" \"]\n          }, void 0, true), currentUser === 'Player 2' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player1Deck\",\n              style: {\n                pointerEvents: 'none'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 822,\n                columnNumber: 37\n              }, this), player1Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: \"assets/card-back.png\",\n                alt: \"\"\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 824,\n                columnNumber: 41\n              }, this)), turn === 'Player 1' && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 59\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 834,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"middleInfo\",\n              style: turn === 'Player 1' ? {\n                pointerEvents: 'none'\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button\",\n                disabled: turn !== 'Player 2',\n                onClick: onCardDrawnHandler,\n                children: \"DRAW CARD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 836,\n                columnNumber: 37\n              }, this), playedCardsPile && playedCardsPile.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                src: `./assets/cards-front/${playedCardsPile[playedCardsPile.length - 1]}.png`,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 838,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"game-button orange\",\n                disabled: player2Deck.length !== 2,\n                onClick: () => {\n                  setUnoButtonPressed(!isUnoButtonPressed);\n                },\n                children: \"UNO\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 843,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 835,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 847,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player2Deck\",\n              style: turn === 'Player 1' ? {\n                pointerEvents: 'none'\n              } : null,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"playerDeckText\",\n                children: \"Player 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 849,\n                columnNumber: 37\n              }, this), player2Deck.map((item, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"Card\",\n                onClick: () => onCardPlayedHandler(item),\n                src: `./assets/cards-front/${item}.png`,\n                alt: \"\"\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 851,\n                columnNumber: 41\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxWrapper\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-box chat-box-player2\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-head\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: \"Chat Box\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 864,\n                    columnNumber: 45\n                  }, this), !isChatBoxHidden ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    className: \"material-icons\",\n                    children: \"keyboard_arrow_down\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 866,\n                    columnNumber: 49\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    onClick: toggleChatBox,\n                    className: \"material-icons\",\n                    children: \"keyboard_arrow_up\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 867,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 863,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"chat-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"msg-insert\",\n                    children: messages.map(msg => {\n                      if (msg.user === 'Player 1') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-receive\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 873,\n                        columnNumber: 64\n                      }, this);\n                      if (msg.user === 'Player 2') return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"msg-send\",\n                        children: msg.text\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 875,\n                        columnNumber: 64\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 870,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"chat-text\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      placeholder: \"Type a message...\",\n                      value: message,\n                      onChange: event => setMessage(event.target.value),\n                      onKeyPress: event => event.key === 'Enter' && sendMessage(event)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 879,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 878,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 869,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 862,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 861,\n              columnNumber: 33\n            }, this), \" \"]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 25\n        }, this)\n      }, void 0, false)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Room full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 886,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 888,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"game-button red\",\n      onClick: handleQuit,\n      children: \"QUIT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 889,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 738,\n    columnNumber: 9\n  }, this);\n};\n_s(Game, \"mezPFTafkc/D93d8piCcvhChCXA=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useEffect","useState","CARDS","shuffleArray","io","Spinner","useLocation","useNavigate","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","socket","Game","props","_s","location","queryParams","URLSearchParams","search","roomCode","get","history","username","gamesPlayed","gamesWon","stats","setStats","room","setRoom","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","message","setMessage","messages","setMessages","gameOver","setGameOver","winner","setWinner","player1Deck","setPlayer1Deck","player2Deck","setPlayer2Deck","turn","setTurn","playedCardsPile","setPlayedCardsPile","drawCardPile","setDrawCardPile","currentColor","setCurrentColor","currentNumber","setCurrentNumber","isChatBoxHidden","setChatBoxHidden","isUnoButtonPressed","setUnoButtonPressed","connectionOptions","connect","emit","error","cleanup","disconnect","shuffledCards","slice","startingCardIndex","Math","floor","random","splice","charAt","on","name","chatBody","document","querySelector","scrollTop","scrollHeight","checkGameOver","arr","length","checkWinner","player","toggleChatBox","style","display","sendMessage","event","preventDefault","onCardPlayedHandler","played_card","cardPlayedBy","numberOfPlayedCard","colorOfPlayedCard","removeIndex","indexOf","alert","copiedDrawCardPileArray","drawCard1","pop","drawCard2","updatedPlayer1Deck","push","updatedPlayer2Deck","drawCard1X","drawCard2X","newColor","prompt","toUpperCase","drawCard3","drawCard4","onCardDrawnHandler","drawCard","colorOfDrawnCard","numberOfDrawnCard","handleGameOver","prevStats","updatedStats","Number","updateStats","handleQuit","console","log","localStorage","setItem","token","getItem","put","headers","Authorization","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","pointerEvents","map","item","i","onClick","disabled","msg","user","text","type","placeholder","value","onChange","target","onKeyPress","key","_c","$RefreshReg$"],"sources":["D:/Study/github/UNO-online/client/src/components/Game.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport CARDS from '../utils/cards';\r\nimport shuffleArray from '../utils/shuffleArray';\r\nimport io from 'socket.io-client';\r\nimport Spinner from './Spinner';\r\nimport {useLocation, useNavigate} from 'react-router-dom';\r\nimport '../App.css';\r\nimport axios from \"axios\";\r\n\r\nconst ENDPOINT = 'http://localhost:5000';\r\n/*\r\nconst ENDPOINT = 'http://localhost:5000';\r\n*/\r\n\r\nlet socket;\r\n\r\nconst Game = (props) => {\r\n    const location = useLocation();\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const roomCode = queryParams.get('roomCode');\r\n    const history = useNavigate();\r\n    const username = queryParams.get('username');\r\n    let gamesPlayed = queryParams.get('gamesPlayed');\r\n    let gamesWon = queryParams.get('gamesWon');\r\n    const [stats, setStats] = useState({ gamesPlayed: gamesPlayed, gamesWon: gamesWon });\r\n\r\n    const [room, setRoom] = useState(roomCode);\r\n    const [roomFull, setRoomFull] = useState(false);\r\n    const [users, setUsers] = useState([]);\r\n    const [currentUser, setCurrentUser] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [gameOver, setGameOver] = useState(true);\r\n    const [winner, setWinner] = useState('');\r\n    const [player1Deck, setPlayer1Deck] = useState([]);\r\n    const [player2Deck, setPlayer2Deck] = useState([]);\r\n    const [turn, setTurn] = useState('');\r\n    const [playedCardsPile, setPlayedCardsPile] = useState([]);\r\n    const [drawCardPile, setDrawCardPile] = useState([]);\r\n    const [currentColor, setCurrentColor] = useState('');\r\n    const [currentNumber, setCurrentNumber] = useState('');\r\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true);\r\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        const connectionOptions =  {\r\n            \"forceNew\" : true,\r\n            \"reconnectionAttempts\": \"Infinity\",\r\n            \"timeout\" : 10000,\r\n            \"transports\" : [\"websocket\"]\r\n        }\r\n        socket = io.connect(ENDPOINT, connectionOptions)\r\n\r\n        socket.emit('join', {room: room}, (error) => {\r\n            if(error)\r\n                setRoomFull(true)\r\n        })\r\n\r\n        return function cleanup() {\r\n            socket.disconnect();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const shuffledCards = shuffleArray(CARDS);\r\n        const player1Deck = shuffledCards.slice(0, 7);\r\n        const player2Deck = shuffledCards.slice(8, 15);\r\n        let startingCardIndex;\r\n        while (true) {\r\n            startingCardIndex = Math.floor(Math.random() * 94);\r\n            if(shuffledCards[startingCardIndex]==='skipR' || shuffledCards[startingCardIndex]==='_R' || shuffledCards[startingCardIndex]==='D2R' ||\r\n                shuffledCards[startingCardIndex]==='skipG' || shuffledCards[startingCardIndex]==='_G' || shuffledCards[startingCardIndex]==='D2G' ||\r\n                shuffledCards[startingCardIndex]==='skipB' || shuffledCards[startingCardIndex]==='_B' || shuffledCards[startingCardIndex]==='D2B' ||\r\n                shuffledCards[startingCardIndex]==='skipY' || shuffledCards[startingCardIndex]==='_Y' || shuffledCards[startingCardIndex]==='D2Y' ||\r\n                shuffledCards[startingCardIndex]==='W' || shuffledCards[startingCardIndex]==='D4W') {\r\n                continue;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1);\r\n        const drawCardPile = shuffledCards;\r\n\r\n        socket.emit('initGameState', {\r\n            gameOver: false,\r\n            turn: 'Player 1',\r\n            player1Deck: [...player1Deck],\r\n            player2Deck: [...player2Deck],\r\n            currentColor: playedCardsPile[0].charAt(1),\r\n            currentNumber: playedCardsPile[0].charAt(0),\r\n            playedCardsPile: [...playedCardsPile],\r\n            drawCardPile: [...drawCardPile]\r\n        });\r\n    }, [socket]);\r\n\r\n    useEffect(() => {\r\n        if (!socket) return;\r\n\r\n        socket.on('initGameState', ({ gameOver, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            setGameOver(gameOver)\r\n            setTurn(turn)\r\n            setPlayer1Deck(player1Deck)\r\n            setPlayer2Deck(player2Deck)\r\n            setCurrentColor(currentColor)\r\n            setCurrentNumber(currentNumber)\r\n            setPlayedCardsPile(playedCardsPile)\r\n            setDrawCardPile(drawCardPile)\r\n        })\r\n\r\n        socket.on('updateGameState', ({ gameOver, winner, turn, player1Deck, player2Deck, currentColor, currentNumber, playedCardsPile, drawCardPile }) => {\r\n            gameOver && setGameOver(gameOver)\r\n            winner && setWinner(winner)\r\n            turn && setTurn(turn)\r\n            player1Deck && setPlayer1Deck(player1Deck)\r\n            player2Deck && setPlayer2Deck(player2Deck)\r\n            currentColor && setCurrentColor(currentColor)\r\n            currentNumber && setCurrentNumber(currentNumber)\r\n            playedCardsPile && setPlayedCardsPile(playedCardsPile)\r\n            drawCardPile && setDrawCardPile(drawCardPile)\r\n            setUnoButtonPressed(false)\r\n        })\r\n\r\n        socket.on(\"roomData\", ({ users }) => {\r\n            setUsers(users)\r\n        })\r\n\r\n        socket.on('currentUserData', ({ name }) => {\r\n            setCurrentUser(name)\r\n        })\r\n\r\n        socket.on('message', message => {\r\n            setMessages(messages => [ ...messages, message ])\r\n\r\n            const chatBody = document.querySelector('.chat-body')\r\n            chatBody.scrollTop = chatBody.scrollHeight\r\n        })\r\n    }, [socket]);\r\n\r\n    const checkGameOver = (arr) => {\r\n        return arr.length === 1;\r\n    }\r\n\r\n    const checkWinner = (arr, player) => {\r\n        return arr.length === 1 ? player : '';\r\n    }\r\n\r\n    const toggleChatBox = () => {\r\n        const chatBody = document.querySelector('.chat-body');\r\n        if(isChatBoxHidden){\r\n            chatBody.style.display = 'block';\r\n            setChatBoxHidden(false);\r\n        }\r\n        else{\r\n            chatBody.style.display = 'none';\r\n            setChatBoxHidden(true);\r\n        }\r\n    }\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        if(message){\r\n            socket.emit('sendMessage', {message: message}, () => {\r\n                setMessage('');\r\n            });\r\n        }\r\n    }\r\n\r\n    const onCardPlayedHandler = (played_card) => {\r\n        const cardPlayedBy = turn;\r\n        if(played_card.length === 2 && ((played_card.charAt(0) >= '0' && played_card.charAt(0) <= '9') || played_card.charAt(0) === '_')){\r\n            const numberOfPlayedCard = played_card.charAt(0);\r\n            const colorOfPlayedCard = played_card.charAt(1);\r\n            if(currentColor === colorOfPlayedCard || currentNumber === numberOfPlayedCard){\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    const removeIndex = player1Deck.indexOf(played_card);\r\n                    if(player1Deck.length === 2 && !isUnoButtonPressed){\r\n                        alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                        const copiedDrawCardPileArray = [...drawCardPile];\r\n                        const drawCard1 = copiedDrawCardPileArray.pop();\r\n                        const drawCard2 = copiedDrawCardPileArray.pop();\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex+1)];\r\n                        updatedPlayer1Deck.push(drawCard1);\r\n                        updatedPlayer1Deck.push(drawCard2);\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: numberOfPlayedCard,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        });\r\n                    }\r\n                    else{\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            turn: 'Player 2',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: numberOfPlayedCard\r\n                        });\r\n                    }\r\n                }\r\n                else{\r\n                    const removeIndex = player2Deck.indexOf(played_card);\r\n                    if(player2Deck.length === 2 && !isUnoButtonPressed){\r\n                        alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                        const copiedDrawCardPileArray = [...drawCardPile];\r\n                        const drawCard1 = copiedDrawCardPileArray.pop();\r\n                        const drawCard2 = copiedDrawCardPileArray.pop();\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex+1)];\r\n                        updatedPlayer2Deck.push(drawCard1);\r\n                        updatedPlayer2Deck.push(drawCard2);\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: numberOfPlayedCard,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        });\r\n                    }\r\n                    else{\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            turn: 'Player 1',\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: numberOfPlayedCard\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                alert('Invalid move');\r\n            }\r\n        }\r\n        else if(played_card.length === 5){\r\n            const colorOfPlayedCard = played_card.charAt(4);\r\n            if(currentColor === colorOfPlayedCard || currentNumber === 404){\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    const removeIndex = player1Deck.indexOf(played_card);\r\n                    if(player1Deck.length === 2 && !isUnoButtonPressed){\r\n                        alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                        const copiedDrawCardPileArray = [...drawCardPile];\r\n                        const drawCard1 = copiedDrawCardPileArray.pop();\r\n                        const drawCard2 = copiedDrawCardPileArray.pop();\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex+1)];\r\n                        updatedPlayer1Deck.push(drawCard1);\r\n                        updatedPlayer1Deck.push(drawCard2);\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: 404,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        });\r\n                    }\r\n                    else{\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: 404\r\n                        });\r\n                    }\r\n                }\r\n                else{\r\n                    const removeIndex = player2Deck.indexOf(played_card);\r\n                    if(player2Deck.length === 2 && !isUnoButtonPressed){\r\n                        alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                        const copiedDrawCardPileArray = [...drawCardPile];\r\n                        const drawCard1 = copiedDrawCardPileArray.pop();\r\n                        const drawCard2 = copiedDrawCardPileArray.pop();\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex+1)];\r\n                        updatedPlayer2Deck.push(drawCard1);\r\n                        updatedPlayer2Deck.push(drawCard2);\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: 404,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        });\r\n                    }\r\n                    else{\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: 404\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                alert('Invalid Move!');\r\n            }\r\n        }\r\n        else if(played_card.length === 3 && played_card.charAt(1) === '2'){\r\n            const colorOfPlayedCard = played_card.charAt(2);\r\n            if(currentColor === colorOfPlayedCard || currentNumber === 252){\r\n                if(cardPlayedBy === 'Player 1'){\r\n                    const removeIndex = player1Deck.indexOf(played_card);\r\n                    const copiedDrawCardPileArray = [...drawCardPile];\r\n                    const drawCard1 = copiedDrawCardPileArray.pop();\r\n                    const drawCard2 = copiedDrawCardPileArray.pop();\r\n                    if(player1Deck.length === 2 && !isUnoButtonPressed){\r\n                        alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                        const drawCard1X = copiedDrawCardPileArray.pop();\r\n                        const drawCard2X = copiedDrawCardPileArray.pop();\r\n                        const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex+1)];\r\n                        updatedPlayer1Deck.push(drawCard1X);\r\n                        updatedPlayer1Deck.push(drawCard2X);\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...updatedPlayer1Deck],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: 252,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        });\r\n                    }\r\n                    else{\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player1Deck),\r\n                            winner: checkWinner(player1Deck, 'Player 1'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                            player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: 252,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        });\r\n                    }\r\n                }\r\n                else{\r\n                    const removeIndex = player2Deck.indexOf(played_card);\r\n                    const copiedDrawCardPileArray = [...drawCardPile];\r\n                    const drawCard1 = copiedDrawCardPileArray.pop();\r\n                    const drawCard2 = copiedDrawCardPileArray.pop();\r\n                    if(player2Deck.length === 2 && !isUnoButtonPressed){\r\n                        alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                        const drawCard1X = copiedDrawCardPileArray.pop();\r\n                        const drawCard2X = copiedDrawCardPileArray.pop();\r\n                        const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex+1)];\r\n                        updatedPlayer2Deck.push(drawCard1X);\r\n                        updatedPlayer2Deck.push(drawCard2X);\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...updatedPlayer2Deck],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: 252,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        });\r\n                    }\r\n                    else{\r\n                        socket.emit('updateGameState', {\r\n                            gameOver: checkGameOver(player2Deck),\r\n                            winner: checkWinner(player2Deck, 'Player 2'),\r\n                            playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                            player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                            player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                            currentColor: colorOfPlayedCard,\r\n                            currentNumber: 252,\r\n                            drawCardPile: [...copiedDrawCardPileArray]\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                alert('Invalid Move!');\r\n            }\r\n        }\r\n        else if(played_card === 'W'){\r\n            if(cardPlayedBy === 'Player 1'){\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\r\n                const removeIndex = player1Deck.indexOf(played_card);\r\n                if(player1Deck.length === 2 && !isUnoButtonPressed){\r\n                    alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                    const copiedDrawCardPileArray = [...drawCardPile];\r\n                    const drawCard1 = copiedDrawCardPileArray.pop();\r\n                    const drawCard2 = copiedDrawCardPileArray.pop();\r\n                    const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex+1)];\r\n                    updatedPlayer1Deck.push(drawCard1);\r\n                    updatedPlayer1Deck.push(drawCard2);\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player1Deck),\r\n                        winner: checkWinner(player1Deck, 'Player 1'),\r\n                        turn: 'Player 2',\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player1Deck: [...updatedPlayer1Deck],\r\n                        currentColor: newColor,\r\n                        currentNumber: 300,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    });\r\n                }\r\n                else{\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player1Deck),\r\n                        winner: checkWinner(player1Deck, 'Player 1'),\r\n                        turn: 'Player 2',\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 300\r\n                    });\r\n                }\r\n            }\r\n            else{\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\r\n                const removeIndex = player2Deck.indexOf(played_card);\r\n                if(player2Deck.length === 2 && !isUnoButtonPressed){\r\n                    alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                    const copiedDrawCardPileArray = [...drawCardPile];\r\n                    const drawCard1 = copiedDrawCardPileArray.pop();\r\n                    const drawCard2 = copiedDrawCardPileArray.pop();\r\n                    const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex+1)];\r\n                    updatedPlayer2Deck.push(drawCard1);\r\n                    updatedPlayer2Deck.push(drawCard2);\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player2Deck),\r\n                        winner: checkWinner(player2Deck, 'Player 2'),\r\n                        turn: 'Player 1',\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player2Deck: [...updatedPlayer2Deck],\r\n                        currentColor: newColor,\r\n                        currentNumber: 300,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    });\r\n                }\r\n                else{\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player2Deck),\r\n                        winner: checkWinner(player2Deck, 'Player 2'),\r\n                        turn: 'Player 1',\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 300\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else if(played_card === 'D4W'){\r\n            if(cardPlayedBy === 'Player 1'){\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\r\n                const removeIndex = player1Deck.indexOf(played_card);\r\n                const copiedDrawCardPileArray = [...drawCardPile];\r\n                const drawCard1 = copiedDrawCardPileArray.pop();\r\n                const drawCard2 = copiedDrawCardPileArray.pop();\r\n                const drawCard3 = copiedDrawCardPileArray.pop();\r\n                const drawCard4 = copiedDrawCardPileArray.pop();\r\n                if(player1Deck.length === 2 && !isUnoButtonPressed){\r\n                    alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                    const drawCard1X = copiedDrawCardPileArray.pop();\r\n                    const drawCard2X = copiedDrawCardPileArray.pop();\r\n                    const updatedPlayer1Deck = [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex+1)];\r\n                    updatedPlayer1Deck.push(drawCard1X);\r\n                    updatedPlayer1Deck.push(drawCard2X);\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player1Deck),\r\n                        winner: checkWinner(player1Deck, 'Player 1'),\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                        player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 600,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    });\r\n                }\r\n                else{\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player1Deck),\r\n                        winner: checkWinner(player1Deck, 'Player 1'),\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player1Deck: [...player1Deck.slice(0, removeIndex), ...player1Deck.slice(removeIndex + 1)],\r\n                        player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 600,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    });\r\n                }\r\n            }\r\n            else{\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\r\n                const removeIndex = player2Deck.indexOf(played_card);\r\n                const copiedDrawCardPileArray = [...drawCardPile];\r\n                const drawCard1 = copiedDrawCardPileArray.pop();\r\n                const drawCard2 = copiedDrawCardPileArray.pop();\r\n                const drawCard3 = copiedDrawCardPileArray.pop();\r\n                const drawCard4 = copiedDrawCardPileArray.pop();\r\n\r\n                //?\r\n                socket.emit('updateGameState', {\r\n                    gameOver: checkGameOver(player2Deck),\r\n                    winner: checkWinner(player2Deck, 'Player 2'),\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                })\r\n\r\n                if(player2Deck.length === 2 && !isUnoButtonPressed){\r\n                    alert('You forgot to press UNO. You drew 2 cards as penalty.');\r\n                    const drawCard1X = copiedDrawCardPileArray.pop();\r\n                    const drawCard2X = copiedDrawCardPileArray.pop();\r\n                    const updatedPlayer2Deck = [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex+1)];\r\n                    updatedPlayer2Deck.push(drawCard1X);\r\n                    updatedPlayer2Deck.push(drawCard2X);\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player2Deck),\r\n                        winner: checkWinner(player2Deck, 'Player 2'),\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player2Deck: [...updatedPlayer2Deck],\r\n                        player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 600,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    });\r\n                }\r\n                else{\r\n                    socket.emit('updateGameState', {\r\n                        gameOver: checkGameOver(player2Deck),\r\n                        winner: checkWinner(player2Deck, 'Player 2'),\r\n                        playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), played_card, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                        player2Deck: [...player2Deck.slice(0, removeIndex), ...player2Deck.slice(removeIndex + 1)],\r\n                        player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                        currentColor: newColor,\r\n                        currentNumber: 600,\r\n                        drawCardPile: [...copiedDrawCardPileArray]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const onCardDrawnHandler = () => {\r\n        if(turn === 'Player 1'){\r\n            const copiedDrawCardPileArray = [...drawCardPile];\r\n            const drawCard = copiedDrawCardPileArray.pop();\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length-1);\r\n            const numberOfDrawnCard = drawCard.charAt(0);\r\n            if(colorOfDrawnCard === currentColor && drawCard.length === 5){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && drawCard.charAt(1) === '2'){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                const copiedDrawCardPileArray = [...drawCardPile];\r\n                const drawCard1 = copiedDrawCardPileArray.pop();\r\n                const drawCard2 = copiedDrawCardPileArray.pop();\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else if(drawCard === 'W'){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else if(drawCard === 'D4W'){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\r\n                const copiedDrawCardPileArray = [...drawCardPile];\r\n                const drawCard1 = copiedDrawCardPileArray.pop();\r\n                const drawCard2 = copiedDrawCardPileArray.pop();\r\n                const drawCard3 = copiedDrawCardPileArray.pop();\r\n                const drawCard4 = copiedDrawCardPileArray.pop();\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player2Deck.slice(player2Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else{\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 2',\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard, ...player1Deck.slice(player1Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n        }\r\n        else{\r\n            const copiedDrawCardPileArray = [...drawCardPile];\r\n            const drawCard = copiedDrawCardPileArray.pop();\r\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length-1);\r\n            const numberOfDrawnCard = drawCard.charAt(0);\r\n            if(colorOfDrawnCard === currentColor && drawCard.length === 5){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 404,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else if(colorOfDrawnCard === currentColor && drawCard.charAt(1) === '2'){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                const copiedDrawCardPileArray = [...drawCardPile];\r\n                const drawCard1 = copiedDrawCardPileArray.pop();\r\n                const drawCard2 = copiedDrawCardPileArray.pop();\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: 252,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else if(drawCard === 'W'){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 300,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else if(drawCard === 'D4W'){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                const newColor = prompt('Enter first letter of new color (R/G/B/Y)').toUpperCase();\r\n                const copiedDrawCardPileArray = [...drawCardPile];\r\n                const drawCard1 = copiedDrawCardPileArray.pop();\r\n                const drawCard2 = copiedDrawCardPileArray.pop();\r\n                const drawCard3 = copiedDrawCardPileArray.pop();\r\n                const drawCard4 = copiedDrawCardPileArray.pop();\r\n                socket.emit('updateGameState', {\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    player1Deck: [...player1Deck.slice(0, player1Deck.length), drawCard1, drawCard2, drawCard3, drawCard4, ...player1Deck.slice(player1Deck.length)],\r\n                    currentColor: newColor,\r\n                    currentNumber: 600,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else if(numberOfDrawnCard === currentNumber || colorOfDrawnCard === currentColor){\r\n                alert(`You drew ${drawCard}. It was played for you.`);\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    playedCardsPile: [...playedCardsPile.slice(0, playedCardsPile.length), drawCard, ...playedCardsPile.slice(playedCardsPile.length)],\r\n                    currentColor: colorOfDrawnCard,\r\n                    currentNumber: numberOfDrawnCard,\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n            else{\r\n                socket.emit('updateGameState', {\r\n                    turn: 'Player 1',\r\n                    player2Deck: [...player2Deck.slice(0, player2Deck.length), drawCard, ...player2Deck.slice(player2Deck.length)],\r\n                    drawCardPile: [...copiedDrawCardPileArray]\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleGameOver = async () => {\r\n        setStats(prevStats => {\r\n            const updatedStats = {\r\n                gamesPlayed: Number(prevStats.gamesPlayed)+1,\r\n                gamesWon: winner === currentUser ? Number(prevStats.gamesWon) + 1 : prevStats.gamesWon\r\n            };\r\n            updateStats(username, updatedStats.gamesPlayed, updatedStats.gamesWon);\r\n            return updatedStats;\r\n        });\r\n    };\r\n\r\n    const handleQuit = async () => {\r\n        await handleGameOver();\r\n        console.log(winner, currentUser);\r\n        localStorage.setItem('isAuthenticated', true);\r\n        history('/');\r\n    }\r\n\r\n    const updateStats = async (username, gamesPlayed, gamesWon) => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            await axios.put('http://localhost:5000/updateStats', { username, gamesPlayed, gamesWon }, { headers: { Authorization: `Bearer ${token}` } });\r\n            console.log('User stats updated successfully');\r\n        } catch (error) {\r\n            console.error('Error updating user stats:', error.message);\r\n        }\r\n    };\r\n\r\n\r\n    return(\r\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\r\n            {(!roomFull) ? <>\r\n\r\n                <div className='topInfo'>\r\n                    <img src='assets/logo.png' alt=\"\"/>\r\n                    <h1>Game Code: {room}</h1>\r\n                </div>\r\n\r\n                {users.length===1 && currentUser === 'Player 2' && <h1 className='topInfoText'>Player 1 has left the game.</h1> }\r\n                {users.length===1 && currentUser === 'Player 1' && <h1 className='topInfoText'>Waiting for Player 2 to join the game.</h1> }\r\n\r\n                {users.length===2 && <>\r\n\r\n                    {gameOver ? <div>{\r\n                        winner !== '' && <><h1>GAME OVER</h1><h2>{winner} wins!</h2></>}\r\n                    </div> :\r\n                        <div>\r\n                            {currentUser === 'Player 1' && <>\r\n                                <div className='player2Deck' style={{pointerEvents: 'none'}}>\r\n                                    <p className='playerDeckText'>Player 2</p>\r\n                                    {player2Deck.map((item, i) => (\r\n                                        <img\r\n                                            key={i}\r\n                                            className='Card'\r\n                                            onClick={() => onCardPlayedHandler(item)}\r\n                                            src='assets/card-back.png'\r\n                                            alt=\"\"\r\n                                        />\r\n                                    ))}\r\n                                    {turn==='Player 2' && <Spinner />}\r\n                                </div>\r\n                                <br />\r\n                                <div className='middleInfo' style={turn === 'Player 2' ? {pointerEvents: 'none'} : null}>\r\n                                    <button className='game-button' disabled={turn !== 'Player 1'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                                    {playedCardsPile && playedCardsPile.length>0 &&\r\n                                        <img\r\n                                            className='Card'\r\n                                            src= {`./assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`}\r\n                                            alt=\"\"\r\n                                        /> }\r\n                                    <button className='game-button orange' disabled={player1Deck.length !== 2} onClick={() => {\r\n                                        setUnoButtonPressed(!isUnoButtonPressed)\r\n                                    }}>UNO</button>\r\n                                </div>\r\n                                <br />\r\n                                <div className='player1Deck' style={turn === 'Player 1' ? null : {pointerEvents: 'none'}}>\r\n                                    <p className='playerDeckText'>Player 1</p>\r\n                                    {player1Deck.map((item, i) => (\r\n                                        <img\r\n                                            key={i}\r\n                                            className='Card'\r\n                                            onClick={() => onCardPlayedHandler(item)}\r\n                                            src={`./assets/cards-front/${item}.png`}\r\n                                            alt=\"\"\r\n                                        />\r\n                                    ))}\r\n                                </div>\r\n\r\n                                <div className=\"chatBoxWrapper\">\r\n                                    <div className=\"chat-box chat-box-player1\">\r\n                                        <div className=\"chat-head\">\r\n                                            <h2>Chat Box</h2>\r\n                                            {!isChatBoxHidden ?\r\n                                                <span onClick={toggleChatBox} className=\"material-icons\">keyboard_arrow_down</span> :\r\n                                                <span onClick={toggleChatBox} className=\"material-icons\">keyboard_arrow_up</span>}\r\n                                        </div>\r\n                                        <div className=\"chat-body\">\r\n                                            <div className=\"msg-insert\">\r\n                                                {messages.map(msg => {\r\n                                                    if(msg.user === 'Player 2')\r\n                                                        return <div className=\"msg-receive\">{msg.text}</div>\r\n                                                    if(msg.user === 'Player 1')\r\n                                                        return <div className=\"msg-send\">{msg.text}</div>\r\n                                                })}\r\n                                            </div>\r\n                                            <div className=\"chat-text\">\r\n                                                <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div> </> }\r\n\r\n                            {currentUser === 'Player 2' && <>\r\n                                <div className='player1Deck' style={{pointerEvents: 'none'}}>\r\n                                    <p className='playerDeckText'>Player 1</p>\r\n                                    {player1Deck.map((item, i) => (\r\n                                        <img\r\n                                            key={i}\r\n                                            className='Card'\r\n                                            onClick={() => onCardPlayedHandler(item)}\r\n                                            src='assets/card-back.png'\r\n                                            alt=\"\"\r\n                                        />\r\n                                    ))}\r\n                                    {turn==='Player 1' && <Spinner />}\r\n                                </div>\r\n                                <br />\r\n                                <div className='middleInfo' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                                    <button className='game-button' disabled={turn !== 'Player 2'} onClick={onCardDrawnHandler}>DRAW CARD</button>\r\n                                    {playedCardsPile && playedCardsPile.length>0 &&\r\n                                        <img\r\n                                            className='Card'\r\n                                            src={`./assets/cards-front/${playedCardsPile[playedCardsPile.length-1]}.png`}\r\n                                            alt=\"\"\r\n                                        /> }\r\n                                    <button className='game-button orange' disabled={player2Deck.length !== 2} onClick={() => {\r\n                                        setUnoButtonPressed(!isUnoButtonPressed)\r\n                                    }}>UNO</button>\r\n                                </div>\r\n                                <br />\r\n                                <div className='player2Deck' style={turn === 'Player 1' ? {pointerEvents: 'none'} : null}>\r\n                                    <p className='playerDeckText'>Player 2</p>\r\n                                    {player2Deck.map((item, i) => (\r\n                                        <img\r\n                                            key={i}\r\n                                            className='Card'\r\n                                            onClick={() => onCardPlayedHandler(item)}\r\n                                            src={`./assets/cards-front/${item}.png`}\r\n                                            alt=\"\"\r\n                                        />\r\n                                    ))}\r\n                                </div>\r\n\r\n                                <div className=\"chatBoxWrapper\">\r\n                                    <div className=\"chat-box chat-box-player2\">\r\n                                        <div className=\"chat-head\">\r\n                                            <h2>Chat Box</h2>\r\n                                            {!isChatBoxHidden ?\r\n                                                <span onClick={toggleChatBox} className=\"material-icons\">keyboard_arrow_down</span> :\r\n                                                <span onClick={toggleChatBox} className=\"material-icons\">keyboard_arrow_up</span>}\r\n                                        </div>\r\n                                        <div className=\"chat-body\">\r\n                                            <div className=\"msg-insert\">\r\n                                                {messages.map(msg => {\r\n                                                    if(msg.user === 'Player 1')\r\n                                                        return <div className=\"msg-receive\">{msg.text}</div>\r\n                                                    if(msg.user === 'Player 2')\r\n                                                        return <div className=\"msg-send\">{msg.text}</div>\r\n                                                })}\r\n                                            </div>\r\n                                            <div className=\"chat-text\">\r\n                                                <input type='text' placeholder='Type a message...' value={message} onChange={event => setMessage(event.target.value)} onKeyPress={event => event.key==='Enter' && sendMessage(event)} />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div> </> }\r\n                        </div> }\r\n                </> }\r\n            </> : <h1>Room full</h1> }\r\n\r\n            <br />\r\n            <button className=\"game-button red\" onClick={handleQuit}>QUIT</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}